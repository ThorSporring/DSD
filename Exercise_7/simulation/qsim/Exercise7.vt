// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2022 08:36:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    code_lock_simple
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module code_lock_simple_vlg_sample_tst(
	clk,
	code,
	enter,
	reset,
	sampler_tx
);
input  clk;
input [3:0] code;
input  enter;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or code or enter or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module code_lock_simple_vlg_check_tst (
	lock,
	sampler_rx
);
input  lock;
input sampler_rx;

reg  lock_expected;

reg  lock_prev;

reg  lock_expected_prev;

reg  last_lock_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	lock_prev = lock;
end

// update expected /o prevs

always @(trigger)
begin
	lock_expected_prev = lock_expected;
end



// expected lock
initial
begin
	lock_expected = 1'bX;
end 
// generate trigger
always @(lock_expected or lock)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lock = %b | ",lock_expected_prev);
	$display("| real lock = %b | ",lock_prev);
`endif
	if (
		( lock_expected_prev !== 1'bx ) && ( lock_prev !== lock_expected_prev )
		&& ((lock_expected_prev !== last_lock_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lock_expected_prev);
		$display ("     Real value = %b", lock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lock_exp = lock_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module code_lock_simple_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] code;
reg enter;
reg reset;
// wires                                               
wire lock;

wire sampler;                             

// assign statements (if any)                          
code_lock_simple i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.code(code),
	.enter(enter),
	.lock(lock),
	.reset(reset)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #2650 1'b1;
	# 3133;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #3533 1'b1;
		# 3133;
	end
	clk = 1'b0;
	clk = #885 1'b1;
	clk = #17 1'b0;
	clk = #5900 1'b1;
	clk = #4100 1'b0;
	clk = #5900 1'b1;
	clk = #5651 1'b0;
	clk = #3250 1'b1;
	clk = #1750 1'b0;
	clk = #3250 1'b1;
	clk = #451 1'b0;
	clk = #9800 1'b1;
	clk = #11186 1'b0;
	clk = #6000 1'b1;
	clk = #4000 1'b0;
	clk = #6000 1'b1;
	clk = #2745 1'b0;
	clk = #4044 1'b1;
	clk = #3900 1'b0;
	clk = #3494 1'b1;
	clk = #3500 1'b0;
	clk = #7193 1'b1;
	clk = #2000 1'b0;
	clk = #3000 1'b1;
	clk = #2000 1'b0;
	clk = #869 1'b1;
	clk = #3236 1'b0;
	clk = #6600 1'b1;
	clk = #3400 1'b0;
	clk = #6600 1'b1;
	clk = #2826 1'b0;
	clk = #2100 1'b1;
	clk = #2900 1'b0;
	clk = #2100 1'b1;
	clk = #238 1'b0;
	clk = #1353 1'b1;
	# 1566;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #1767 1'b1;
		# 1566;
	end
	clk = 1'b0;
	clk = #415 1'b1;
	# 545;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #4600 1'b1;
		# 2066;
	end
	clk = 1'b0;
	clk = #4600 1'b1;
	clk = #2488 1'b0;
	clk = #2400 1'b1;
	clk = #2600 1'b0;
	clk = #2400 1'b1;
	clk = #4015 1'b0;
	clk = #3467 1'b1;
	clk = #3199 1'b0;
	clk = #3467 1'b1;
	clk = #3199 1'b0;
	clk = #3467 1'b1;
	clk = #821 1'b0;
	clk = #922 1'b1;
	clk = #5200 1'b0;
	clk = #4800 1'b1;
	clk = #5200 1'b0;
	clk = #3878 1'b1;
	# 659;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #2167 1'b1;
		# 1166;
	end
	clk = 1'b0;
	clk = #2167 1'b1;
	clk = #1660 1'b0;
	clk = #2150 1'b1;
	clk = #2850 1'b0;
	clk = #2150 1'b1;
	clk = #1698 1'b0;
	clk = #4496 1'b1;
	clk = #3900 1'b0;
	clk = #4225 1'b1;
	# 2733;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #3933 1'b1;
		# 2733;
	end
	clk = 1'b0;
	clk = #1314 1'b1;
	clk = #931 1'b0;
	clk = #2850 1'b1;
	clk = #2150 1'b0;
	clk = #2850 1'b1;
	clk = #1818 1'b0;
	clk = #2267 1'b1;
	clk = #1066 1'b0;
	clk = #2267 1'b1;
	clk = #1066 1'b0;
	clk = #2267 1'b1;
	clk = #468 1'b0;
	clk = #182 1'b1;
	clk = #11000 1'b0;
	clk = #9950 1'b1;
	# 1466;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #1867 1'b1;
		# 1466;
	end
	clk = 1'b0;
	clk = #5662 1'b1;
	clk = #4200 1'b0;
	clk = #874 1'b1;
	# 1758;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #4000 1'b1;
		# 2666;
	end
	clk = 1'b0;
	clk = #4000 1'b1;
	clk = #910 1'b0;
	clk = #9626 1'b1;
	clk = #8400 1'b0;
	clk = #1974 1'b1;
	clk = #1555 1'b0;
	clk = #4800 1'b1;
	clk = #5200 1'b0;
	clk = #4800 1'b1;
	clk = #5715 1'b0;
	clk = #2650 1'b1;
	clk = #2350 1'b0;
	clk = #2650 1'b1;
	clk = #2889 1'b0;
	clk = #3733 1'b1;
	clk = #2933 1'b0;
	clk = #3733 1'b1;
	clk = #2933 1'b0;
	clk = #3733 1'b1;
	clk = #573 1'b0;
	clk = #2650 1'b1;
	clk = #2350 1'b0;
	clk = #2650 1'b1;
	clk = #2429 1'b0;
	clk = #6800 1'b1;
	clk = #3200 1'b0;
	clk = #6800 1'b1;
	clk = #2874 1'b0;
	clk = #3881 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #1119 1'b1;
	clk = #1636 1'b0;
	clk = #9400 1'b1;
	clk = #12067 1'b0;
	clk = #2800 1'b1;
	clk = #3866 1'b0;
	clk = #2800 1'b1;
	clk = #3866 1'b0;
	clk = #2800 1'b1;
	clk = #765 1'b0;
	clk = #1658 1'b1;
	clk = #10800 1'b0;
	clk = #7981 1'b1;
	clk = #2700 1'b0;
	clk = #2300 1'b1;
	clk = #2700 1'b0;
	clk = #1861 1'b1;
	# 1042;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #2067 1'b1;
		# 1266;
	end
	clk = 1'b0;
	clk = #2067 1'b1;
	clk = #1469 1'b0;
	clk = #2034 1'b1;
	clk = #1299 1'b0;
	clk = #2034 1'b1;
	clk = #1299 1'b0;
	clk = #2034 1'b1;
	clk = #5275 1'b0;
	clk = #4700 1'b1;
	clk = #5300 1'b0;
	clk = #4700 1'b1;
	clk = #81 1'b0;
	clk = #2938 1'b1;
	clk = #3200 1'b0;
	clk = #6800 1'b1;
	clk = #3200 1'b0;
	clk = #3862 1'b1;
	# 1165;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #1734 1'b1;
		# 1599;
	end
	clk = 1'b0;
	clk = #1734 1'b1;
	clk = #1916 1'b0;
	clk = #2900 1'b1;
	clk = #2100 1'b0;
	clk = #2900 1'b1;
	clk = #619 1'b0;
	clk = #1687 1'b1;
	# 2799;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #3867 1'b1;
		# 2799;
	end
	clk = 1'b0;
	clk = #3509 1'b1;
	clk = #5500 1'b0;
	clk = #6477 1'b1;
	clk = #3200 1'b0;
	clk = #6800 1'b1;
	clk = #3200 1'b0;
	clk = #3496 1'b1;
	# 2112;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #3134 1'b1;
		# 3532;
	end
	clk = 1'b0;
	clk = #3134 1'b1;
	clk = #3375 1'b0;
	clk = #3800 1'b1;
	clk = #2866 1'b0;
	clk = #3800 1'b1;
	clk = #2866 1'b0;
	clk = #3800 1'b1;
	clk = #915 1'b0;
	clk = #322 1'b1;
	clk = #4200 1'b0;
	clk = #5800 1'b1;
	clk = #4200 1'b0;
	clk = #5478 1'b1;
	clk = #102 1'b0;
	clk = #4300 1'b1;
	clk = #5598 1'b0;
	clk = #1375 1'b1;
	clk = #2050 1'b0;
	clk = #2950 1'b1;
	clk = #2050 1'b0;
	clk = #2740 1'b1;
	# 1099;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #2234 1'b1;
		# 1099;
	end
	clk = 1'b0;
	clk = #1863 1'b1;
	clk = #1900 1'b0;
	clk = #3100 1'b1;
	clk = #1900 1'b0;
	clk = #3297 1'b1;
	# 1333;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #2000 1'b1;
		# 1333;
	end
	clk = 1'b0;
	clk = #1155 1'b1;
	# 1399;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #1934 1'b1;
		# 1399;
	end
	clk = 1'b0;
	clk = #4871 1'b1;
	clk = #5400 1'b0;
	clk = #4600 1'b1;
	clk = #5400 1'b0;
	clk = #2685 1'b1;
	clk = #3900 1'b0;
	clk = #6100 1'b1;
	clk = #3900 1'b0;
	clk = #6180 1'b1;
	# 2399;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #4267 1'b1;
		# 2399;
	end
	clk = 1'b0;
	clk = #5393 1'b1;
	clk = #2600 1'b0;
	clk = #2400 1'b1;
	clk = #2600 1'b0;
	clk = #31 1'b1;
	clk = #1487 1'b0;
	clk = #5500 1'b1;
	clk = #3013 1'b0;
	clk = #1243 1'b1;
	# 1466;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #1867 1'b1;
		# 1466;
	end
	clk = 1'b0;
	clk = #4735 1'b1;
	clk = #7600 1'b0;
	clk = #9523 1'b1;
	clk = #1650 1'b0;
	clk = #3350 1'b1;
	clk = #1650 1'b0;
	clk = #8147 1'b1;
	clk = #3300 1'b0;
	clk = #6700 1'b1;
	clk = #3300 1'b0;
	clk = #670 1'b1;
	# 1236;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #4067 1'b1;
		# 2599;
	end
	clk = 1'b0;
	clk = #4067 1'b1;
	clk = #1365 1'b0;
	clk = #3740 1'b1;
	# 2066;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #4600 1'b1;
		# 2066;
	end
	clk = 1'b0;
	clk = #862 1'b1;
	clk = #1194 1'b0;
	clk = #5900 1'b1;
	clk = #5638 1'b0;
	clk = #6600 1'b1;
end 
// code[ 3 ]
initial
begin
	code[3] = 1'b0;
	code[3] = #10000 1'b1;
	code[3] = #30000 1'b0;
	code[3] = #10000 1'b1;
	code[3] = #30000 1'b0;
end 
// code[ 2 ]
initial
begin
	code[2] = 1'b0;
	code[2] = #10000 1'b1;
	code[2] = #30000 1'b0;
	code[2] = #10000 1'b1;
	code[2] = #30000 1'b0;
end 
// code[ 1 ]
initial
begin
	code[1] = 1'b0;
	code[1] = #50000 1'b1;
	code[1] = #30000 1'b0;
end 
// code[ 0 ]
initial
begin
	code[0] = 1'b0;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

code_lock_simple_vlg_sample_tst tb_sample (
	.clk(clk),
	.code(code),
	.enter(enter),
	.reset(reset),
	.sampler_tx(sampler)
);

code_lock_simple_vlg_check_tst tb_out(
	.lock(lock),
	.sampler_rx(sampler)
);
endmodule

