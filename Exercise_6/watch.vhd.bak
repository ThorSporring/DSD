library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.all;

entity watch is
    port(
        --input
        clk: in std_logic;
        speed: in std_logic;
        reset: in std_logic;
        --output
        sec_1: out std_logic_vector(6 downto 0);
        sec_10: out std_logic_vector(6 downto 0);

        min_1: out std_logic_vector(6 downto 0);
        min_10: out std_logic_vector(6 downto 0);

        hrs_1: out std_logic_vector(6 downto 0);
        hrs_10: out std_logic_vector(6 downto 0);
        tm: out std_logic_vector(15 downto 0)

        );
end watch;

architecture watch_impl of watch is

    signal clk_out_temp : std_logic;
    signal cout : std_logic_vector(5 downto 0);
    signal count_sec1 : std_logic_vector(3 downto 0);
    signal count_sec10: std_logic_vector(3 downto 0);
    signal count_min1: std_logic_vector(3 downto 0);
    signal count_min10: std_logic_vector(3 downto 0);
    signal count_hrs10: std_logic_vector(3 downto 0);
    signal count_hrs1: std_logic_vector(3 downto 0);

begin
    tm => open;

    cge: entity work.clock_gen(clock_gen_impl) port map(
        clk => clk,
        speed => speed,
        reset => reset,
        clk_out => clk_out_temp

    );

    mc1: entity work.multi_counter(multi_counter_impl) port map(
        clk => clk_out_temp,
        mode => '00',
        reset => reset
        count => count_sec1
        cout => cout(0)

    );
    mc2: entity work.multi_counter(multi_counter_impl) port map(
        clk => cout(0),
        mode => '01',
        reset => reset,
        count => count_sec10,
        cout => cout(1)
        );
    mc3: entity work.multi_counter(multi_counter_impl) port map(
        clk => cout(1),
        mode => '00',
        reset => reset,
        count => count_min1,
        cout => cout(2)
        );
    );
    mc4: entity work.multi_counter(multi_counter_impl) port map(
        clk => cout(2),
        mode => '01',
        reset => reset,
        count => count_min10,
        cout => cout(3)
        );
    mc5: entity work.multi_counter(multi_counter_impl) port map(
        clk => cout(3),
        mode => '00',
        reset => reset,
        count => count_hrs1,
        cout => cout(4)
    );
    mc6: entity work.multi_counter(multi_counter_impl) port map(
        clk => cout(4),
        mode => '11',
        reset => reset,
        count => count_hrs10,
        cout => cout(5)
        );
    
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => sec_1
    );
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => sec_10
    );
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => min_1
    );
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => min_10
    );
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => hrs_1
    );
    bn1: entity work.bin_to_7_segment(bin_to_7_segment_impl) port map(
        bcd_input => count_sec1,
        s_seg => hrs_10
    );

end watch_impl ; -- watch_impl